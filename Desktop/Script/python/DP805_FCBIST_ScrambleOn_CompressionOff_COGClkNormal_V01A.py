import sys
from i2cfunc import *


#######################################
##     Check Board in USB port       ##
##   MUST add in the head of file !! ##
#######################################


#update log
##                Full Chip BIST Sequence
##        1.	All block off
##        2.	LC frequency setting
##        3.	EQ Loop back in, LCVCO 2.7G clock output enable
##        4.	analog setting, logic setting, ECC on/off
##        5.	VTPLL start. P0.0x04=0x0b
##        6.	video timing
##        7.	video MUX turn on, P2.0x72=0x88, wait some time
##        8.	Scramble on, VPG start send pattern to DPTS, then to PHY.
##        9.	PHY on, wait some time
##        10.	video ready, wait some time
##        11.	CRC check
##        12.	Signature check
#20150323 initial version

##I2CSetFastMode(1)


error=0
loop=0
##SCR_en=0
##SCR_en=1
WriteReg(0x12,0xc3,0x81)  ##PSR EXIT
WriteReg(0x12,0xc4,0x02)  ##PSR EXIT
sleep(1)
WriteReg(0x18,0xff,0x00)
##Disable AUX
WriteReg(0x18,0x3b,0x01)
WriteReg(0x18,0x45,0x01)
external_clock_check_fail=ReadRegCompare(0x18,0xd1,0x20,0x20)   #pass=0, fail=1
WriteReg(0x12, 0x60, 0x01)	## set DPCD 600h to normal mode
while (loop<1):
    loop=loop+1
    print '---------------------------------------------------------------------'
    print ''
    print 'loop is %d' %loop
    
    print ''
##===========================1.	All block off
    CRC_pass=0
    Sign_pass=0
    cdr_lock_pass=0
    vpll_pass=0
##    if (loop >1):
##        WriteReg(0x12,0xc4,0x02)
##        sleep(3)
    WriteReg(0x14,0xc9,0x00)    #force phy on off
    WriteReg(0x14,0x31,0x00)    #DPTS off
    WriteReg(0x10,0xeb,0xf0)    #lane_enb = 1, off lane
    WriteReg(0x10,0xec,0x50)    #CDR start=0
    WriteReg(0x14,0x09,0x02)    #CDIPLL start=0
    WriteReg(0x14,0x00,0x22)    #VPLL and SPLL start=0
    WriteReg(0x14,0x96,0x03)    #MPLL page11 subpaage3
    BurstWriteReg(0x26,0xac,0x01,0x9a,0x20,0x08) ##force MPLL start=0
    BurstWriteReg(0x26,0xac,0x01,0x9a,0x00,0x08) ##disable force
    WriteReg(0x14,0xa1,0x80)    ###[7] hpd + PHY RDY
####    print "pll off"
####    KeyInt()
##
##    #----------------------------------------
    vlpll_not_lock_fail=ReadRegCompare(0x18,0xd1,0x02,0x02)
    v2pll_not_lock_fail=ReadRegCompare(0x18,0xd0,0x02,0x02)
    vmpll_not_lock_fail=ReadRegCompare(0x18,0xd5,0x02,0x02)
    vspll_not_lock_fail=ReadRegCompare(0x18,0xd8,0x02,0x02)
    cdr_not_lock_fail=ReadRegCompare(0x18,0xb1,0x00,0x0f)
##
    sleep(0.01) #analog power off, power settle down
##=======================2.	LC frequency setting

##    WriteReg(0x18,0x50,0x64)    #enable LC, LC=2.7G
##    WriteReg(0x18,0x51,0x20)    #LC=2.7G
    WriteReg(0x18,0x54,0x00)    #LC turn on
    WriteReg(0x18,0x5c,0x10)    # mask LC tudn
    WriteReg(0x18,0x52,0x00)    #change to LC
    sleep(0.01)
    WriteReg(0x18,0x50,0xa5)    #enable LC, LC=3.39G
    WriteReg(0x18,0x51,0x3d)    #LC=3.39G

##    WriteReg(0x18,0x50,0x65)    #enable LC, LC=3.24G
##    WriteReg(0x18,0x51,0x3c)    #LC=3.24G
##    WriteReg(0x18,0x50,0x67)    #enable LC, LC=2.94G
##    WriteReg(0x18,0x51,0x3b)    #LC=2.94G
##==========================3.	EQ Loop back in, LCVCO 2.7G clock output enable
    WriteReg(0x18,0x30,0x0f)	###EQ Loopback in EN lane 0,1 	###DP615 new
    WriteReg(0x18,0x40,0x0b)	###h'0d=0000,0x1101	
                                ###[7:4]=0000	nothing to TS,0xOP/ON
                                ###[3:0]=Loopback EN,0xLB & DRV PWDB
    WriteReg(0x18,0x31,0x80)	###enable LB data from LBLA from SER, not LNX to LN0	 

##==========================4.	analog setting, logic setting, ECC on/off

    #----------- PHY setting 20150324------------
    WriteReg(0x18,0xff,0x00)
    WriteReg(0x18,0x8a,0xff)    #CTN/FTN wait time
##    WriteReg(0x18,0x88,0xb2)
    WriteReg(0x18,0x33,0x28)
    WriteReg(0x18,0x71,0x1d)    #lock in/out: 20000ppm/100000ppm. lock out 2times
    WriteReg(0x18,0x74,0x08)    #CDR phase align time=5us
    WriteReg(0x18,0xea,0x06)    # set pd/rfd enable delay time=8us from cdr_starT
    WriteReg(0x18,0x8b,0xff)    # disable dco flock impact pd/rfd loop and cdr_align status.   
    WriteReg(0x18,0x94,0xbe)    #select 270MHz for CDR calibration freq.step
    WriteReg(0x18,0x7e,0x22)    # disable Los tod signal trigger Code freeze
    WriteReg(0x18,0x8c,0x60)    # set delay time between CFZ tO PST_CFZ=74ns
    WriteReg(0x18,0x7a,0xc5)    #DCO_FTRNG+/-50%
    WriteReg(0x18,0x7b,0x83)    #ios100%, gitune100%,fmin+8\\ 
                                #[6:5] IOS 00:100%; 01:-25%; 10:+50%; 11:+25%;
                                #[4:2] GITUNE 000~111: 100/+14/+33/+60/-33/-27/-20/-11%;
                                #[1:0] FMIN: 00~11: +4/+0/+12/+8 bands;
    WriteReg(0x18,0x7c,0x03)    # [5:4]DCO Up/Dn current tune(100%)
                                # [5:4] 00:100%; 01:+33%; 10:-34%; 11:-20%;
    WriteReg(0x18,0x7d,0x23)    #[5:4]:LDO=1.19V , [3:0] NOF=64LSB
    WriteReg(0x10,0xdc,0x75)    #CRSTART 120us
##    WriteReg(0x18,0x70,0x41)    #start CDR DCO calibration

##-------------RPIO setting
    WriteReg(0x18,0x00,0x20)    #CUR Driver, 100ohm, 2mA.
    WriteReg(0x18,0x02,0x11)
    WriteReg(0x18,0x03,0x11)
    WriteReg(0x18,0x04,0x11)
    WriteReg(0x18,0x05,0x11)
    WriteReg(0x18,0x06,0xb0)    #common mode 0.55V.
    WriteReg(0x18,0x18,0x28)
    WriteReg(0x18,0x63,0x02)
    WriteReg(0x18,0x0f,0x80)
    WriteReg(0x18,0x11,0xc0)
    WriteReg(0x18,0x12,0x0c)
    WriteReg(0x18,0x13,0x11)
    WriteReg(0x18,0x14,0x40)
    WriteReg(0x18,0x15,0x40)
    WriteReg(0x18,0x24,0x03)
    WriteReg(0x18,0x2d,0x80)
    WriteReg(0x18,0x6b,0x02)
    WriteReg(0x18,0x20,0x02)
    ##LPDDR RPHY setting(subpage1)
    WriteReg(0x18, 0xff, 0x01)
    WriteReg(0x18, 0x13, 0x88)	##slice 0 
    WriteReg(0x18, 0x27, 0x88)	##slice 1 
    WriteReg(0x18, 0x3b, 0x88)	##slice 2 
    WriteReg(0x18, 0x4f, 0x88)	##slice 3 
    WriteReg(0x18, 0x63, 0x88)	##slice CA
    WriteReg(0x18, 0x11, 0x84)	 ##slice 0 
    WriteReg(0x18, 0x25, 0x84)	 ##slice 1 
    WriteReg(0x18, 0x39, 0x84)	 ##slice 2 
    WriteReg(0x18, 0x4d, 0x84)	 ##slice 3 
    WriteReg(0x18, 0x61, 0x84)	 ##slice CA
    WriteReg(0x18, 0x0f, 0x00)
    WriteReg(0x18, 0x23, 0x00)
    WriteReg(0x18, 0x37, 0x00)
    WriteReg(0x18, 0x4b, 0x00)
    WriteReg(0x18, 0x5f, 0x00)
    WriteReg(0x18, 0x07, 0xce)	
    WriteReg(0x18, 0x1b, 0xce)	
    WriteReg(0x18, 0x2f, 0xce)	
    WriteReg(0x18, 0x43, 0xce)	
    WriteReg(0x18, 0x65, 0x08)
######################################################################    
    WriteReg(0x18, 0x06, 0x11)	
    WriteReg(0x18, 0x1a, 0x11)	
    WriteReg(0x18, 0x2e, 0x11)	
    WriteReg(0x18, 0x42, 0x11)
###################################################################### 
    WriteReg(0x18, 0xff, 0x00)

##--------------Agile setting
##    WriteReg(0x12, 0x12, 0x0c)  ##3.24G
##    WriteReg(0x12, 0x12, 0x0a) ##2.7G
    WriteReg(0x14, 0x32, 0x5e)	####[6] agile_en, [4:0] base_tap
    WriteReg(0x14, 0x33, 0x07)
    WriteReg(0x10,0xeb,0x08)    #lane enb
    sleep(0.01)
    WriteReg(0x18,0x70,0x41)    #start CDR DCO calibration
    
##    WriteReg(0x10,0xeb,0x08)    #lane enb
##    WriteReg(0x10,0xec,0x40)
##    WriteReg(0x18,0x70,0x41)    
##    WriteReg(0x18,0x30,0x0f)
##    WriteReg(0x18,0x40,0x0b)
##    WriteReg(0x18,0x31,0x80)
    WriteReg(0x18,0x94,0xbe)

######    #--logic setting--ECC off 20150409 from Jinwang
##    WriteReg(0x10,0x52,0x05)
##    WriteReg(0x10,0x53,0x41)
##    WriteReg(0x10,0x52,0x03)
##    WriteReg(0x10,0x53,0x00)
##    WriteReg(0x10,0x52,0x07)
##    WriteReg(0x10,0x53,0x00)
##    WriteReg(0x10,0x52,0x04)
##    WriteReg(0x10,0x53,0x01)
    
##=======================5.	VTPLL start
##    ####clock setting
    ### vclk 380 MHz
    WriteReg(0x14, 0x01, 0x7b);	####nf of the vclk
    WriteReg(0x14, 0x02, 0x09);	##ni and nf of the vclk
    WriteReg(0x14, 0x03, 0xc7);	####start & load & band & ni[7:6]
    #### sclk 380 MHz
    WriteReg(0x14, 0x05, 0x2f);	####nf of the sclk
    WriteReg(0x14, 0x06, 0xe1);	##ni and nf of the sclk
    WriteReg(0x14, 0x07, 0x60);	####start & load & band & ni[7:5] 
##    ###### vclk 350 MHz
##    WriteReg(0x14, 0x01, 0x42);	####nf of the vclk
##    WriteReg(0x14, 0x02, 0x7b);	##ni and nf of the vclk
##    WriteReg(0x14, 0x03, 0xc6);	####start & load & band & ni[7:6]
##    ####sclk 350 MHz
##    WriteReg(0x14, 0x05, 0x68);	####nf of the sclk
##    WriteReg(0x14, 0x06, 0xcf);	##ni and nf of the sclk
##    WriteReg(0x14, 0x07, 0x60);	####start & load & band & ni[7:5]
##    ###### vclk 2xx MHz
##    WriteReg(0x14, 0x01, 0xa9);	####nf of the vclk
##    WriteReg(0x14, 0x02, 0x16);	##ni and nf of the vclk
##    WriteReg(0x14, 0x03, 0x88);	####start & load & band & ni[7:6]
##    ####sclk 2xx MHz
##    WriteReg(0x14, 0x05, 0xa5);	####nf of the sclk
##    WriteReg(0x14, 0x06, 0x02);	##ni and nf of the sclk
##    WriteReg(0x14, 0x07, 0x41);	####start & load & band & ni[7:5]
    WriteReg(0x14, 0x00, 0xff);	####vpll and spll start
    WriteReg(0x14, 0x25, 0x06);	####[1] vclk_comp enable  [2] vclk_bypass enable
    #########cog clk 540 MHz
    WriteReg(0x14, 0x0a, 0x00);	####nf of the cogclk
    WriteReg(0x14, 0x0b, 0x40);	##ni and nf of the cogclk
    WriteReg(0x14, 0x0c, 0x81);	##band & ni[7:6]
    WriteReg(0x14, 0x09, 0x0f); ##cog pll start
    #### mclk 533 MHz
    WriteReg(0x14,0x96,0x03);
##    BurstWriteReg(0x26,0xa0,0xd0,0x3b,0x01,0x00); #533MHz
    BurstWriteReg(0x26,0xa0,0x71,0x1c,0x01,0x00); #480MHz    
##    BurstWriteReg(0x26,0xa0,0xbd,0x04,0x01,0x00); #440MHz
    BurstWriteReg(0x26,0xa8,0x01,0x00,0x00,0x00); ##MPLL load
    BurstWriteReg(0x26,0xa4,0x01,0x00,0x00,0x00); ##MPLL start
    BurstWriteReg(0x26,0xa4,0x00,0x00,0x00,0x00); ##MPLL start clear
    sleep(0.02)
    ##====================VTPLL lock check
    vlpll_lock_fail=ReadRegCompare(0x18,0xd1,0x00,0x02)
    v2pll_lock_fail=ReadRegCompare(0x18,0xd0,0x00,0x02)
    vmpll_lock_fail=ReadRegCompare(0x18,0xd5,0x00,0x02)
    vspll_lock_fail=ReadRegCompare(0x18,0xd8,0x00,0x02)

##    print "pll on"
##    KeyInt()
    
    WriteReg(0x14, 0x29, 0x3f);	##[5] tcon_ervds clock enable [4:0] lbuf[9:5]
    #####changed 20151019##################
    WriteReg(0x14, 0x2a, 0x00); ##port_enb
    WriteReg(0x14, 0x24, 0x03)	##[3] disable WPC clk [2] VPROC CLK Bypass
    WriteReg(0x14, 0x25, 0x06)	##[1] vclk_comp enable  [2] vclk_bypass enable
    WriteReg(0x14, 0x29, 0x3f)	##[7] epi enable  [5] ervds enable
    WriteReg(0x14, 0x2a, 0x00)	##[6:5] port7_6 enb
##    WriteReg(0x14, 0x2b, 0x00)	##[0] tpio_clk select
    WriteReg(0x14, 0x2b, 0x00)	##[0] tpio_clk select 1: TPIOCLK from LCDCLK ;   0: TPIOCLK from HVCLK
    WriteReg(0x14, 0x26, 0x00)
    WriteReg(0x14, 0x27, 0x80)	##[0] REG_SCL_EN0
    WriteReg(0x14, 0x28, 0xfd)	##[7:3] REG_LBUF4:0 [2]REG_LBUF_EN [0] HVCLK_GC
    WriteReg(0x14, 0x24, 0x03) ##[1]fr clock sw enable[0]pixmap clock sw enable
    WriteReg(0x14, 0x0e, 0xff)	##disable COG3 and COG7
    WriteReg(0x14, 0x31, 0x07)	## dpb enable controlled by DPCD 04CCh
    ####dprx setting
#################20150529##############
    WriteReg(0x10, 0x52, 0x9d);
    WriteReg(0x10, 0x53, 0x00);
#################20160721##############   
    WriteReg(0x10, 0x52, 0x01);
    WriteReg(0x10, 0x53, 0x48);
    WriteReg(0x10, 0x52, 0x14);
    WriteReg(0x10, 0x53, 0x77);
#######################################
    WriteReg(0x10, 0x95, 0x3f);
    WriteReg(0x10, 0x9e, 0xa2); 
########################Mask ATTR_stable###
    WriteReg(0x10, 0x00, 0x0f)	
    WriteReg(0x10, 0x3c, 0xa2);	##
    WriteReg(0x10, 0x09, 0x20);	##
    WriteReg(0x10, 0x0a, 0x0d);	####htotal
    WriteReg(0x10, 0x0b, 0x70);	##
    WriteReg(0x10, 0x0c, 0x00);	#### hstart
    WriteReg(0x10, 0x0d, 0x80);	##
    WriteReg(0x10, 0x0e, 0x0c);	#### hwidth
    WriteReg(0x10, 0x0f, 0x2e);	##
    WriteReg(0x10, 0x10, 0x00);	#### vtotal
    WriteReg(0x10, 0x11, 0x06);	##
    WriteReg(0x10, 0x12, 0x00);	#### vstart
    WriteReg(0x10, 0x13, 0x20);	##
    WriteReg(0x10, 0x14, 0x00);	#### vheight
    WriteReg(0x10, 0x15, 0x20);	##
    WriteReg(0x10, 0x16, 0x00);	####hsw
    WriteReg(0x10, 0x17, 0x04);	##
    WriteReg(0x10, 0x18, 0x00);	####vsw
    WriteReg(0x10, 0x19, 0x20);	####Mis0
    WriteReg(0x10, 0x1a, 0x00);	#### Misc1
    WriteReg(0x10, 0x4b, 0xeb);	##
    WriteReg(0x10, 0x4c, 0x14);	####vpll_th
    WriteReg(0x10, 0x4d, 0x03);	#### rx crc
    WriteReg(0x10, 0x03, 0x01);	#### attr ctrl
    WriteReg(0x10, 0x66, 0x07);	#### sd sel
    WriteReg(0x10, 0x08, 0x40);	#### video th
    WriteReg(0x10, 0x3e, 0x50);	#### hvstart1
    WriteReg(0x10, 0x44, 0x50);	#### hend00
    WriteReg(0x10, 0x45, 0x50);	#### hend01
    WriteReg(0x10, 0x7e, 0x34);	#### vfctrl14
    WriteReg(0x10, 0x52, 0xa1);	#### hwidth_new0 index
    WriteReg(0x10, 0x53, 0x80);	#### hwidth_new0 low
    WriteReg(0x10, 0x52, 0xa2);	#### hwidth_new0 index
    WriteReg(0x10, 0x53, 0x0c);	#### hwidth_new0 high
    WriteReg(0x10, 0x52, 0xa3);	#### vheight_new0 index
    WriteReg(0x10, 0x53, 0x20);	#### vheight_new0 low
    WriteReg(0x10, 0x52, 0xa4);	#### vheight_new0 index
    WriteReg(0x10, 0x53, 0x00);	#### vheight_new0 high
    WriteReg(0x10, 0x52, 0x91);	#### hwidth_new0 threshold index
    WriteReg(0x10, 0x53, 0x00);	#### hwidth_new0 low
    WriteReg(0x10, 0x52, 0x92);	#### hwidth_new0 index
    WriteReg(0x10, 0x53, 0x01);	#### hwidth_new0 high
    WriteReg(0x10, 0x52, 0x93);	#### vheight_new0 threshold index
    WriteReg(0x10, 0x53, 0x04);	#### vheight_new0 low
    WriteReg(0x10, 0x52, 0x94);	#### vheight_new0 index
    WriteReg(0x10, 0x53, 0x00);	#### vheight_new0 high
    WriteReg(0x10, 0x52, 0xa0);	#### attrib stable mux index
    WriteReg(0x10, 0x53, 0x87);	#### attrib stable mux
    WriteReg(0x10, 0x52, 0x12);	#### deskew disable index
    WriteReg(0x10, 0x53, 0x3e);	#### deskew disable 
    ####train setting
    WriteReg(0x12, 0x12, 0x0c);	## link rate 3.24g
######################20150529#################
    WriteReg(0x12, 0x14, 0x20);
#################################################
##    WriteReg(0x12, 0x12, 0x0a);	## link rate 2.7g
    WriteReg(0x12, 0x13, 0x84);	##
##    WriteReg(0x12, 0x14, 0x00);	##
    WriteReg(0x10, 0xd8, 0x48);	##
    WriteReg(0x10, 0xd9, 0x30);	##
    WriteReg(0x10, 0xdb, 0x80);	##
    WriteReg(0x10, 0xf8, 0x0a);	##
    WriteReg(0x12, 0x02, 0xc4);	#### enable TPS3_SUPPORT
    
##=======================6.	video timing
##    ####freerun setting
    WriteReg(0x28, 0x50, 0x90);	##
    WriteReg(0x28, 0x51, 0x06);	####htotal
    WriteReg(0x28, 0x52, 0x38);	##
    WriteReg(0x28, 0x53, 0x00);	####hstart
    WriteReg(0x28, 0x54, 0x40);	##
    WriteReg(0x28, 0x55, 0x06);	####hwidht
    WriteReg(0x28, 0x56, 0x2e);	##
    WriteReg(0x28, 0x57, 0x00);	####vtotal
    WriteReg(0x28, 0x58, 0x06);	##
    WriteReg(0x28, 0x59, 0x00);	####vstart
    WriteReg(0x28, 0x5a, 0x20);	##
    WriteReg(0x28, 0x5b, 0x00);	####vheight
    WriteReg(0x28, 0x5c, 0x10);	##
    WriteReg(0x28, 0x5d, 0x00);	####hsphsw
    WriteReg(0x28, 0x5e, 0x04);	####vsw
    WriteReg(0x28, 0x5f, 0x00);	####bs_dly, vsw
    WriteReg(0x28, 0x41, 0x00);	##
    WriteReg(0x28, 0x42, 0x01);	##
    WriteReg(0x28, 0x43, 0x00);	##
    WriteReg(0x28, 0x44, 0x00);	####pm_vblank_n delay
    WriteReg(0x28, 0x45, 0x00);	##
    WriteReg(0x28, 0x46, 0x01);	##
    WriteReg(0x28, 0x47, 0x00);	##
    WriteReg(0x28, 0x48, 0x00);	####pm_vblank_n setup
    WriteReg(0x28, 0xa8, 0x20);	##
    WriteReg(0x28, 0xa9, 0x01);	##
    WriteReg(0x28, 0xaa, 0x00);	##
    WriteReg(0x28, 0xab, 0x00);	####vv_valid delay
    WriteReg(0x28, 0xae, 0x02);	####rr_valid freq
    WriteReg(0x28, 0x70, 0xad);	##[7] free run sw enable sel, fr pattern
    WriteReg(0x28, 0xb0, 0x80);	##[7] free run sw enable
    WriteReg(0x28, 0x71, 0x25);	
    ## dpts setting
    WriteReg(0x14, 0x31, 0x07);   ## dpts enable
    WriteReg(0x14, 0xc9, 0x02);   ## [1] force phy
    WriteReg(0x10, 0x57, 0x01);	##[0]  dpts out sel
    ##dprx video enable
    WriteReg(0x10, 0x96, 0x90);	#### vfctrl1
##    WriteReg(0x14, 0xa1, 0x90);	####[7] hpd [4] PHY_RDY
    WriteReg(0x14, 0xfd, 0xb0);	##i2c done
    ####vproc setting
    WriteReg(0x1a, 0x5c, 0x03);	## crc enable for vproc in, crc_value p5.05 
    WriteReg(0x1a, 0x84, 0x03);	## crc enable for vproc out, crc value p5.09 

    #### scaler setting 
##    WriteReg(0x14, 0x30, 0xc0);	#### scaler bypass

    WriteReg(0x1c,0x02, 0x5c); 
    WriteReg(0x1c,0x03, 0x4e); 
    WriteReg(0x1c,0x04, 0x0f); 
    WriteReg(0x1c,0x05, 0x5b); 
    WriteReg(0x1c,0x0a, 0x26); 
    WriteReg(0x1c,0x0e, 0x32); 
    WriteReg(0x1c,0x0f, 0x00); 
    WriteReg(0x1c,0x10, 0x80); 
    WriteReg(0x1c,0x11, 0x0c); 
    WriteReg(0x1c,0x12, 0x20); 
    WriteReg(0x1c,0x13, 0x00); 
    WriteReg(0x1c,0x14, 0x80); 
    WriteReg(0x1c,0x15, 0x0c); 
    WriteReg(0x1c,0x16, 0x20); 
    WriteReg(0x1c,0x17, 0x00); 
    WriteReg(0x1c,0x18, 0x00); 
    WriteReg(0x1c,0x19, 0x00); 
    WriteReg(0x1c,0x1a, 0x00); 
    WriteReg(0x1c,0x1b, 0x00); 
    WriteReg(0x1c,0x1c, 0x00); 
    WriteReg(0x1c,0x1d, 0x00); 
    WriteReg(0x1c,0x1e, 0x00); 
    WriteReg(0x1c,0x1f, 0x00); 
    WriteReg(0x1c,0x20, 0x80); 
    WriteReg(0x1c,0x21, 0x0c); 
    WriteReg(0x1c,0x22, 0x20); 
    WriteReg(0x1c,0x23, 0x00); 
    WriteReg(0x1c,0x24, 0x38); 
    WriteReg(0x1c,0x25, 0x00); 
    WriteReg(0x1c,0x26, 0x0c); 
    WriteReg(0x1c,0x27, 0x00); 
    WriteReg(0x1c,0x28, 0x0c); 
    WriteReg(0x1c,0x29, 0x00); 
    WriteReg(0x1c,0x2a, 0x08); 
    WriteReg(0x1c,0x2b, 0x00); 
    WriteReg(0x1c,0x2c, 0x06); 
    WriteReg(0x1c,0x2d, 0x00); 
    WriteReg(0x1c,0x2e, 0x59); 
    WriteReg(0x1c,0x2f, 0x00); 
    WriteReg(0x1c,0x30, 0x00); 
    WriteReg(0x1c,0x31, 0x00); 
    WriteReg(0x1c,0x32, 0xd0); 
    WriteReg(0x1c,0x33, 0x0c); 
    WriteReg(0x1c,0x34, 0x00); 
    WriteReg(0x1c,0x35, 0x00); 
    WriteReg(0x1c,0x36, 0x20); 
    WriteReg(0x1c,0x37, 0x00); 
    WriteReg(0x1c,0x38, 0x00); 
    WriteReg(0x1c,0x39, 0x20); 
    WriteReg(0x1c,0x3a, 0x00); 
    WriteReg(0x1c,0x3b, 0x00); 
    WriteReg(0x1c,0x3c, 0x00); 
    WriteReg(0x1c,0x3d, 0x00); 
    WriteReg(0x1c,0x3e, 0x00); 
    WriteReg(0x1c,0x3f, 0x00); 
    WriteReg(0x1c,0x40, 0x00); 
    WriteReg(0x1c,0x43, 0xff); 
    WriteReg(0x1c,0x44, 0xff); 
    WriteReg(0x1c,0x45, 0xd6); 
    WriteReg(0x1c,0x46, 0x03); 
    WriteReg(0x1c,0x47, 0xbb); 
    WriteReg(0x1c,0x48, 0x09); 
    WriteReg(0x1c,0x49, 0x00); 
    WriteReg(0x1c,0x4a, 0x59); 
    WriteReg(0x1c,0x4b, 0x25); 
    WriteReg(0x1c,0x4c, 0xef); 
    WriteReg(0x1c,0x4d, 0x2c); 
    WriteReg(0x1c,0x4e, 0x22); 
    WriteReg(0x1c,0x4f, 0xc1); 
    WriteReg(0x1c,0x50, 0xff); 
    WriteReg(0x1c,0x51, 0xff); 
    WriteReg(0x1c,0x52, 0xff); 
    WriteReg(0x1c,0x53, 0x00); 
    WriteReg(0x1c,0x54, 0xff); 
    WriteReg(0x1c,0x55, 0xff); 
    WriteReg(0x1c,0x56, 0x00); 
    WriteReg(0x1c,0x57, 0x00); 
    WriteReg(0x1c,0x58, 0x30); 
    WriteReg(0x1c,0x59, 0x8d); 
    WriteReg(0x1c,0x5a, 0x01); 
    WriteReg(0x1c,0x5b, 0x00); 
    WriteReg(0x1c,0x5c, 0x30); 
    WriteReg(0x1c,0x5d, 0x8d); 
    WriteReg(0x1c,0x5e, 0x01); 
    WriteReg(0x1c,0x5f, 0x00); 
    WriteReg(0x1c,0x60, 0x00); 
    WriteReg(0x1c,0x61, 0x00); 
    WriteReg(0x1c,0x62, 0xd0); 
    WriteReg(0x1c,0x63, 0x0c); 
    WriteReg(0x1c,0x64, 0x00); 
    WriteReg(0x1c,0x65, 0x00); 
    WriteReg(0x1c,0x66, 0x00); 
    WriteReg(0x1c,0x67, 0x00); 
    WriteReg(0x1c,0x68, 0x76); 
    WriteReg(0x1c,0x69, 0xb2); 
    WriteReg(0x1c,0x6a, 0x00); 
    WriteReg(0x1c,0x6b, 0x00); 
    WriteReg(0x1c,0x6c, 0x60); 
    WriteReg(0x1c,0x6d, 0x58); 
    WriteReg(0x1c,0x6e, 0x05); 
    WriteReg(0x1c,0x6f, 0x00); 
    WriteReg(0x1c,0x70, 0x00); 
    WriteReg(0x1c,0x71, 0x00); 
    WriteReg(0x1c,0x72, 0x00); 
    WriteReg(0x1c,0x73, 0x00); 
    WriteReg(0x1c,0x78, 0x00); 
    WriteReg(0x1c,0x79, 0x00); 
    WriteReg(0x1c,0x7a, 0x00); 
    WriteReg(0x1c,0x7b, 0x00); 
    WriteReg(0x1c,0x80, 0xff); 
    WriteReg(0x1c,0x81, 0xff); 
    WriteReg(0x1c,0x86, 0xa8); 
    WriteReg(0x1c,0x87, 0x0c); 
    WriteReg(0x1c,0x88, 0xc0); 
    WriteReg(0x1c,0x89, 0x12); 
    WriteReg(0x1c,0x8a, 0x30); 
    WriteReg(0x1c,0x8b, 0x0c); 
    WriteReg(0x1c,0x8c, 0x08); 
    WriteReg(0x1c,0x8d, 0x00); 
    WriteReg(0x1c,0x8e, 0xe8); 
    WriteReg(0x1c,0x8f, 0x51); 
    WriteReg(0x1c,0x90, 0x73); 
    WriteReg(0x1c,0x91, 0x04); 
    WriteReg(0x1c,0x92, 0x01); 
    WriteReg(0x1c,0x93, 0x24); 
    WriteReg(0x1c,0x94, 0x72); 
    WriteReg(0x1c,0x95, 0x14); 
    WriteReg(0x1c,0x96, 0x28); 
    WriteReg(0x1c,0x97, 0x14); 
    WriteReg(0x1c,0x98, 0x28); 
    WriteReg(0x1c,0x99, 0x24); 
    WriteReg(0x1c,0x9a, 0x07); 
    WriteReg(0x1c,0x9b, 0x01); 
    WriteReg(0x1c,0x9c, 0x6f); 
    WriteReg(0x1c,0x9d, 0x0d); 
    WriteReg(0x1c,0xa0, 0x34); 
    WriteReg(0x1c,0xa1, 0x06); 
    WriteReg(0x1c,0xa2, 0x00); 
    WriteReg(0x1c,0xa3, 0x00); 
    WriteReg(0x1c,0xa4, 0x0a); 
    WriteReg(0x1c,0xa5, 0x00); 
    WriteReg(0x1c,0xa6, 0x00); 
    WriteReg(0x1c,0xa7, 0x00); 
    WriteReg(0x1c,0xa8, 0x03); 
    WriteReg(0x1c,0xa9, 0x04); 
    WriteReg(0x1c,0xaa, 0x00); 
    WriteReg(0x1c,0xab, 0x00); 
    WriteReg(0x1c,0xac, 0x03); 
    WriteReg(0x1c,0xad, 0x04); 
    WriteReg(0x1c,0xae, 0x00); 
    WriteReg(0x1c,0xaf, 0x00); 
    WriteReg(0x1c,0xb0, 0x34); 
    WriteReg(0x1c,0xb1, 0x06); 
    WriteReg(0x1c,0xb2, 0x00); 
    WriteReg(0x1c,0xb3, 0x00); 
    WriteReg(0x1c,0xb4, 0x0a); 
    WriteReg(0x1c,0xb5, 0x00); 
    WriteReg(0x1c,0xb6, 0x00); 
    WriteReg(0x1c,0xb7, 0x00); 
    WriteReg(0x1c,0x02, 0xdc); 
    WriteReg(0x1c,0x05, 0x5b); 
    WriteReg(0x1c,0x02, 0xdd);
    ## ##psr setting
    #############################
    WriteReg(0x20, 0xff, 0x00);         
    WriteReg(0x20, 0x35, 0x01);
    WriteReg(0x20, 0x65, 0x42);
    WriteReg(0x20, 0x91, 0x49);
    #######20160721#############
    WriteReg(0x20, 0xff, 0x01);         
    WriteReg(0x20, 0x00, 0x20);      
    WriteReg(0x20, 0x01, 0x00);      
    WriteReg(0x20, 0x02, 0x00);      
    WriteReg(0x20, 0x03, 0x00);      
    WriteReg(0x20, 0x08, 0x40);      
    WriteReg(0x20, 0x09, 0x00);      
    WriteReg(0x20, 0x0a, 0x00);      
    WriteReg(0x20, 0x0b, 0x00);      
    WriteReg(0x20, 0x0c, 0x08);       
    WriteReg(0x20, 0x0d, 0x00);      
    WriteReg(0x20, 0x0e, 0x10);      
    WriteReg(0x20, 0x0f, 0x00);        
    WriteReg(0x20, 0x10, 0x02);      
    WriteReg(0x20, 0x11, 0x00);      
    WriteReg(0x20, 0x12, 0x01);      
    WriteReg(0x20, 0x13, 0x00);      
    WriteReg(0x20, 0x14, 0x00);      
    WriteReg(0x20, 0x15, 0x10);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x02);      
    WriteReg(0x20, 0x15, 0x5b);      
    WriteReg(0x20, 0x15, 0xc0);       
    WriteReg(0x20, 0x15, 0x20);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x02);      
    WriteReg(0x20, 0x15, 0x86);      
    WriteReg(0x20, 0x15, 0xe0);      
    WriteReg(0x20, 0x15, 0x31);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x02);      
    WriteReg(0x20, 0x15, 0xb8);      
    WriteReg(0x20, 0x15, 0xa2);      
    WriteReg(0x20, 0x15, 0x42);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x02);      
    WriteReg(0x20, 0x15, 0xf2);        
    WriteReg(0x20, 0x15, 0xb0);      
    WriteReg(0x20, 0x15, 0x53);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x03);      
    WriteReg(0x20, 0x15, 0x37);      
    WriteReg(0x20, 0x15, 0x4b);      
    WriteReg(0x20, 0x15, 0x64);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x03);      
    WriteReg(0x20, 0x15, 0x89);      
    WriteReg(0x20, 0x15, 0xa0);      
    WriteReg(0x20, 0x15, 0x75);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x03);      
    WriteReg(0x20, 0x15, 0xee);      
    WriteReg(0x20, 0x15, 0x40);      
    WriteReg(0x20, 0x15, 0x86);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x6c);       
    WriteReg(0x20, 0x15, 0x08);      
    WriteReg(0x20, 0x15, 0x97);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x05);      
    WriteReg(0x20, 0x15, 0x0d);      
    WriteReg(0x20, 0x15, 0xc0);       
    WriteReg(0x20, 0x15, 0xa8);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x05);      
    WriteReg(0x20, 0x15, 0xe5);      
    WriteReg(0x20, 0x15, 0x60);      
    WriteReg(0x20, 0x15, 0xb9);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x07);      
    WriteReg(0x20, 0x15, 0x13);      
    WriteReg(0x20, 0x15, 0x40);      
    WriteReg(0x20, 0x15, 0xca);       
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x08);      
    WriteReg(0x20, 0x15, 0xd8);      
    WriteReg(0x20, 0x15, 0x10);      
    WriteReg(0x20, 0x15, 0xdb);      
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x0b);      
    WriteReg(0x20, 0x15, 0xca);       
    WriteReg(0x20, 0x15, 0xc0);       
    WriteReg(0x20, 0x15, 0xec);       
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x11);      
    WriteReg(0x20, 0x15, 0xb0);      
    WriteReg(0x20, 0x15, 0x20);      
    WriteReg(0x20, 0x15, 0xfd);        
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x23);      
    WriteReg(0x20, 0x15, 0x60);      
    WriteReg(0x20, 0x15, 0x40);      
    WriteReg(0x20, 0x15, 0xfe);        
    WriteReg(0x20, 0x15, 0x06);      
    WriteReg(0x20, 0x15, 0x04);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x15, 0x8d);      
    WriteReg(0x20, 0x15, 0x81);      
    WriteReg(0x20, 0x15, 0x00);      
    WriteReg(0x20, 0x16, 0x54);      
    WriteReg(0x20, 0x17, 0x76);      
    WriteReg(0x20, 0x18, 0x08);      
    WriteReg(0x20, 0x19, 0x60);      
    WriteReg(0x20, 0x1a, 0xcb);       
    WriteReg(0x20, 0x1b, 0x01);      
    WriteReg(0x20, 0x1c, 0x00);       
    WriteReg(0x20, 0x1d, 0xc0);       
    WriteReg(0x20, 0x1e, 0xf2);        
    WriteReg(0x20, 0x1f, 0x01);        
    WriteReg(0x20, 0x20, 0x00);      
    WriteReg(0x20, 0x21, 0x50);      
    WriteReg(0x20, 0x22, 0xcb);       
    WriteReg(0x20, 0x23, 0x01);      
    WriteReg(0x20, 0x24, 0x00);      
    WriteReg(0x20, 0x25, 0xd0);      
    WriteReg(0x20, 0x26, 0xf2);        
    WriteReg(0x20, 0x27, 0x01);      
    WriteReg(0x20, 0x28, 0x00);      
    WriteReg(0x20, 0x29, 0x20);      
    WriteReg(0x20, 0x2a, 0xb1);      
    WriteReg(0x20, 0x2b, 0x01);      
    WriteReg(0x20, 0x2c, 0x00);       
    WriteReg(0x20, 0x2d, 0xf0);        
    WriteReg(0x20, 0x2e, 0x75);      
    WriteReg(0x20, 0x2f, 0x02);        
    WriteReg(0x20, 0x30, 0x00);      
    WriteReg(0x20, 0x31, 0x60);      
    WriteReg(0x20, 0x32, 0x9d);      
    WriteReg(0x20, 0x33, 0x02);      
    WriteReg(0x20, 0x34, 0x00);      
    WriteReg(0x20, 0x35, 0x5e);      
    WriteReg(0x20, 0x36, 0x9d);      
    WriteReg(0x20, 0x37, 0x02);      
    WriteReg(0x20, 0x38, 0x00);      
    WriteReg(0x20, 0x39, 0x0e);      
    WriteReg(0x20, 0x3a, 0x00);      
    WriteReg(0x20, 0x3b, 0x20);      
    WriteReg(0x20, 0x3c, 0x02);       
    WriteReg(0x20, 0x3d, 0x02);      
    WriteReg(0x20, 0x3e, 0x01);      
    WriteReg(0x20, 0x3f, 0x10);        
    WriteReg(0x20, 0x40, 0x00);      
    WriteReg(0x20, 0x47, 0x30);      
    WriteReg(0x20, 0x48, 0x00);      
    WriteReg(0x20, 0x49, 0x00);      
    WriteReg(0x20, 0x4a, 0xae);      
    WriteReg(0x20, 0x4b, 0x82);      
    WriteReg(0x20, 0x4c, 0x02);       
    WriteReg(0x20, 0x4d, 0x00);      
    WriteReg(0x20, 0x4e, 0x95);      
    WriteReg(0x20, 0x4f, 0x17);        
    WriteReg(0x20, 0x50, 0x00);      
    WriteReg(0x20, 0x51, 0x00);      
    WriteReg(0x20, 0x52, 0x0a);      
    WriteReg(0x20, 0x53, 0x00);      
    WriteReg(0x20, 0x54, 0x00);      
    WriteReg(0x20, 0x55, 0x00);      
    WriteReg(0x20, 0x56, 0x60);      
    WriteReg(0x20, 0x57, 0xf9);        
    WriteReg(0x20, 0x58, 0x00);      
    WriteReg(0x20, 0x59, 0x00);      
    WriteReg(0x20, 0x64, 0x39);      
    WriteReg(0x20, 0x65, 0x60);      
    WriteReg(0x20, 0x66, 0x34);      
    WriteReg(0x20, 0x67, 0x02);      
    WriteReg(0x20, 0x68, 0x00);      
    WriteReg(0x20, 0x69, 0x80);      
    WriteReg(0x20, 0x6a, 0xaa);      
    WriteReg(0x20, 0x6b, 0x02);      
    WriteReg(0x20, 0x6c, 0x00);       
    WriteReg(0x20, 0x6d, 0x00);      
    WriteReg(0x20, 0x6e, 0x0d);      
    WriteReg(0x20, 0x6f, 0x02);        
    WriteReg(0x20, 0x70, 0x00);      
    WriteReg(0x20, 0x82, 0xe0);      
    WriteReg(0x20, 0x83, 0x5b);      
    WriteReg(0x20, 0x84, 0x02);      
    WriteReg(0x20, 0x85, 0x00);      
    WriteReg(0x20, 0x8b, 0x00);      
    WriteReg(0x20, 0x8c, 0x00);       
    WriteReg(0x20, 0x8d, 0xae);      
    WriteReg(0x20, 0x8e, 0x0c);       
    WriteReg(0x20, 0x8f, 0xae);        
    WriteReg(0x20, 0x90, 0x0c);       
    WriteReg(0x20, 0x91, 0x26);      
    WriteReg(0x20, 0x93, 0xc0);       
    WriteReg(0x20, 0x94, 0xe5);      
    WriteReg(0x20, 0x95, 0xff);         
    WriteReg(0x20, 0x96, 0xff);         
    WriteReg(0x20, 0x8a, 0x01);      
    WriteReg(0x20, 0xff, 0x00);
##    WriteReg(0x20, 0x04, 0x07);      
##    WriteReg(0x20, 0x34, 0x07);
##    changed 20150407 by yufeng
    WriteReg(0x20, 0x04, 0x3f);      
    WriteReg(0x20, 0x34, 0x3f);      
    WriteReg(0x20, 0x0d, 0x00);      
    WriteReg(0x20, 0x0e, 0x00);      
    WriteReg(0x20, 0x0f, 0x00);        
    WriteReg(0x20, 0x09, 0x00);      
    WriteReg(0x20, 0x0a, 0x00);      
    WriteReg(0x20, 0x0b, 0x80);      
    WriteReg(0x20, 0x0c, 0x00);       
    WriteReg(0x20, 0x07, 0x04);      
    WriteReg(0x20, 0x08, 0x00);      
    WriteReg(0x20, 0x92, 0x00);      
    WriteReg(0x20, 0x35, 0x07);      
    WriteReg(0x20, 0x72, 0x0b);      
    WriteReg(0x12, 0xc0, 0x07);
    ##vrr det
    WriteReg(0x1a,0x02,0x30); ##vrr_pipe
    WriteReg(0x1a,0x3c,0x20);  ##vheight
    WriteReg(0x1a,0x3d,0x00);  ##vheight
    WriteReg(0x1a,0x3e,0x08);  ##hs delay
    WriteReg(0x1a, 0x01, 0x07)	##[2]=0 Enable PRC,[1]=1 frc acc bypass
    WriteReg(0x1a, 0x5a, 0x00)	## debug del for r in
    WriteReg(0x1a, 0x5b, 0x00)	## debug out
    WriteReg(0x1a, 0x5c, 0x00)	## crc enable
    WriteReg(0x1a, 0x60, 0x00)	##[0] wpc_en [1]DE_GAMMA_EN [2]EN_GAMMA_EN[3]TEMP_COMP_EN[5]TEMP_VIR_EN
    WriteReg(0x1a, 0x1f, 0x01)	##[2:0]DITHER_CASE_LRR
    WriteReg(0x1a, 0x20, 0x18)	##FRC 
    WriteReg(0x1a, 0x21, 0x00)	####[5]enable S Dither
    WriteReg(0x1a, 0x23, 0x1a)	##FRC
    WriteReg(0x1a, 0xb0, 0x00)	## DETLA_PER_LUT_RF0
    WriteReg(0x1a, 0xb1, 0x00)	## DETLA_PER_LUT_RF1
    WriteReg(0x1a, 0xb2, 0x00)	## DETLA_PER_LUT_RF2
    WriteReg(0x1a, 0xb3, 0x00)	## DETLA_PER_LUT_RF3
    WriteReg(0x1a, 0xca, 0xb4)	##RG_COLOR_HEIGHT_G
    WriteReg(0x1a, 0xcb, 0x19)	##RG_COLOR_HEIGHT_B
    WriteReg(0x1a, 0xcc, 0x40)	##Hwidth[7:0]
    WriteReg(0x1a, 0xcd, 0x0b)	##Hwidth[15:8]
    WriteReg(0x1a, 0xce, 0x08)	##Vheight[7:0]
    WriteReg(0x1a, 0xcf, 0x07)	##Vheight[15:8]
    WriteReg(0x1a, 0xd0, 0x20)	##BLK_SIZE
    ##line buffer
    WriteReg(0x24,0xbb,0x24);  ##[7] lbuf bypass[6:5] vs out sel [2] dummy sel
    WriteReg(0x24,0xba,0xff);  ##lbuf en
    WriteReg(0x24,0xb9,0xc0);  ##[7:6]lbuf en
    WriteReg(0x24,0xb2,0x20);  ##vheight
    WriteReg(0x24,0xb3,0x00);  ##vheight
    WriteReg(0x24,0xb1,0x09);  ##lbuf del
    WriteReg(0x24,0xc0,0x11);  ##lbuf deh
    WriteReg(0x24,0xc1,0x00);  ##lbuf dummy
    WriteReg(0x24,0xc2,0x00);  ##lbuf dummy
    WriteReg(0x24,0xc3,0x00);  ##lbuf dummy
    WriteReg(0x24,0xc4,0x03);  ##crc enable
    ####pixmap setting
    ##resolution: 3200x32
    ####***Pixmap Setting*****##
    #####changed20150803###############
    WriteReg(0x24, 0x2f, 0x00) ####cinv opt1
    WriteReg(0x24, 0x30, 0x00) ####cinv opt2
    WriteReg(0x24,0x21,0x80); ##hwidth[7:0]
    WriteReg(0x24,0x22,0x0c); ##[7:5] m_round[10:8], [4:0]hwidth[12:8]
    WriteReg(0x24,0x23,0x64); ##mround[7:0]
    WriteReg(0x24,0x24,0x20); ##mk[7:0]
    WriteReg(0x24,0x25,0x03); ##[5] vde_bypass, [4] mcyc_sel, [3:0] mk[11:8]
    WriteReg(0x24,0x27,0x0e); ##mcyc0
    WriteReg(0x24,0x26,0x0e); ##mcyc1
    WriteReg(0x24,0x5c,0x0e); ##mcyc2
    WriteReg(0x24,0x5d,0x0e); ##mcyc3
    WriteReg(0x24,0x68,0x0e); ##mcyc4
    WriteReg(0x24,0x69,0x0e); ##mcyc5
    WriteReg(0x24,0x6a,0x0e); ##mcyc6
    WriteReg(0x24,0x6b,0x0e); ##mcyc7
    WriteReg(0x24,0x3f,0x0e); ##hcyc
    WriteReg(0x24,0x28,0x08); ##npix
    WriteReg(0x24,0x29,0x78); ##rvnum[7:0]
    WriteReg(0x24,0x2a,0x05); ##rvnum[15:8]
    WriteReg(0x24,0x2b,0x16); ##dlnum[7:0]
    WriteReg(0x24, 0x36, 0x00) ####Init0
    WriteReg(0x24, 0x37, 0x00) ####Init1
    WriteReg(0x24, 0x38, 0x00) ####Init2
    WriteReg(0x24, 0x39, 0x00) ####Init3
    WriteReg(0x24, 0x3a, 0x00) ####Init4
    WriteReg(0x24, 0x3b, 0x00) ####Init5
    WriteReg(0x24,0x40,0x90); ##m0[7:0]
    WriteReg(0x24,0x41,0x11); ##m1[11:8], m0[11:8]
    WriteReg(0x24,0x42,0x90); ##m1[7:0]
    WriteReg(0x24,0x43,0x90); ##m2[7:0]
    WriteReg(0x24,0x44,0x11); ##m3[11:8], m2[11:8]
    WriteReg(0x24,0x45,0x90); ##m3[7:0]
    WriteReg(0x24,0x46,0x90); ##m4[7:0]
    WriteReg(0x24,0x47,0x11); ##m5[11:8], m4[11:8]
    WriteReg(0x24,0x48,0x90); ##m5[7:0]
    WriteReg(0x24,0x49,0x90); ##m6[7:0]
    WriteReg(0x24,0x4a,0x11); ##m7[11:8], m6[11:8]
    WriteReg(0x24,0x4b,0x90); ##m7[7:0]
    WriteReg(0x24,0x4c,0x00); ##m8[7:0]
    WriteReg(0x24,0x4d,0x00); ##m8[11:8]
    WriteReg(0x24,0x5e,0x25); ##vheight[7:0]
    WriteReg(0x24,0x5f,0x00); ##[6]bs1st_mask, [3:0]vheight[11:8]
    WriteReg(0x24,0x96,0x4e);##vbde_start[7:0]=(htotal-hwidth)/2 - hs_dly
    WriteReg(0x24,0x97,0x00);##vbde_start[12:8]
    WriteReg(0x24,0x98,0x00);##vbde_len[7:0]=hwidth/2
    WriteReg(0x24,0x99,0x04);##vbde_len[12:8]
    WriteReg(0x24,0x9a,0x00);##vbde_num[7:0]
    WriteReg(0x24,0x9b,0x00);##vbde_num[15:8]
    WriteReg(0x24,0x9c,0x00);##vbde_num[23:16]
    WriteReg(0x24,0x66,0x5e);##rvde_dly[7:0]
    WriteReg(0x24,0x67,0x03);##rvde_dly[12:8]
    WriteReg(0x24,0x9d,0xac);##vb_1st_hs delay[7:0] = rvde_dly[11:0] + vbde_start
    WriteReg(0x24,0x9e,0x03);##[4:0] vb_1st_hs delay[12:8]
    WriteReg(0x24,0x9f,0xac);##vb_n1st_hs delay[7:0] = rvde_dly[11:0] + vbde_start
    WriteReg(0x24,0xa0,0x03);##[4:0] vb_n1st_hs delay[12:8]
    WriteReg(0x24,0xa4,0x01);##
    #####changed20150805
    WriteReg(0x24, 0x53, 0x82) ####[7:6]RV_VDE_SEL 
    WriteReg(0x24,0x4f,0x03);## crc enable
    ####tcon setting
    ##cog setting######changed 20151019
    WriteReg(0x16,0xff,0x01);
    WriteReg(0x16, 0x00, 0x00)##[5]RGTPEN [4]RGVBRGBEN [3]RGVBEN [1]RGVBLANK_TRAIN_EN [0]RGSB_INBAND_EN
    WriteReg(0x16, 0x01, 0x00)##[4]RGSCRB_CODE_SEL 0:1T 1:1bit [1]RGVB_SYNC_EN
    WriteReg(0x16, 0x02, 0x01)
    WriteReg(0x16, 0x2b, 0xff) ##Port swap 1, 0
    WriteReg(0x16, 0x2c, 0xff) ##Port swap 3,2
    WriteReg(0x16, 0x2d, 0xff) ##Port swap 5,4
    WriteReg(0x16, 0x2e, 0xff) ##Port swap 7,6
    WriteReg(0x16, 0x2f, 0x0f) ##[3:0]Port swap 8
    WriteReg(0x16, 0x30, 0x00)	##port0,3,5 lane swap
    WriteReg(0x16, 0x32, 0x00)	##port0_lane0,port1_lane0,1,port2_lane1,port3_lane0 PN swap
    WriteReg(0x16, 0x33, 0x00)	##port4_lane1,port5_lane0 PN swap
    WriteReg(0x16, 0x00, 0x00)	##[5]RGTPEN [4]RGVBRGBEN [3]RGVBEN [1]RGVBLANK_TRAIN_EN [0]RGSB_INBAND_EN           
    WriteReg(0x16, 0x01, 0x00)	##[4]RGSCRB_CODE_SEL 0:1T 1:1bit [1]RGVB_SYNC_EN    
    WriteReg(0x16,0x02,0x01);  ##[0] V2 enable

    ########changed 20151229
    WriteReg(0x16, 0x1f, 0xe3)	##LFSR seed                                                                         
    WriteReg(0x16, 0x20, 0xc1)	##LFSR seed                                                                         
    WriteReg(0x16, 0x21, 0xe1)	##LFSR seed
    
    WriteReg(0x16,0x18,0xff);  ##[7:0] port7~port0 enable
    WriteReg(0x16,0x19,0x03);  ##[1] Lane2 enable
    WriteReg(0x16,0x1a,0x19);  ##[1:0] 1: ervds, [3] 8bit, [4] lane2
    WriteReg(0x16,0x1b,0xc8);  ##dwidth_l
    WriteReg(0x16,0x1c,0x00);  ##dwidth_h
    WriteReg(0x16,0xf0,0x01);  ##sig_vs
    WriteReg(0x16,0xf1,0x00);  ##sig_vs
    WriteReg(0x16,0xf2,0x00);  ##sig_vs
    WriteReg(0x16,0xf3,0x2a);  ##sig_ve
    WriteReg(0x16,0xf4,0x00);  ##sig_ve
    WriteReg(0x16,0xf5,0x00);  ##sig_ve
    ######changed 20150805
    WriteReg(0x16, 0x6f, 0x00)
    WriteReg(0x16, 0x47, 0x00)
    WriteReg(0x16, 0x25, 0x00)##dummy rgb
    WriteReg(0x16, 0x26, 0x00)##dummy rgb
    WriteReg(0x16, 0x27, 0x00)##dummy rgb
    WriteReg(0x16,0x11,0x03);  ##ignore MBC LOL

    WriteReg(0x16, 0xff, 0x02)
    WriteReg(0x16, 0x9C, 0x00)####fix enable
    WriteReg(0x16, 0x00, 0x15)##CFG 0
    WriteReg(0x16, 0x01, 0x00)##CFG 1
    WriteReg(0x16, 0x02, 0x00)##CFG 2
    WriteReg(0x16, 0x03, 0x00)##CFG 3
    WriteReg(0x16, 0x04, 0x00)##CFG 4
    WriteReg(0x16, 0x05, 0x00)##CFG 5
    WriteReg(0x16, 0x06, 0x00)##CFG 6
    WriteReg(0x16, 0x07, 0x00)##CFG 7
    WriteReg(0x16, 0x08, 0x00)##CFG 8
    WriteReg(0x16, 0x09, 0x2a)##CFG 9
    WriteReg(0x16, 0x0a, 0x00)##CFG 10
    WriteReg(0x16, 0x0b, 0x00)##CFG 11

    WriteReg(0x16, 0x0c, 0x00)##CFG 12
    WriteReg(0x16, 0x0d, 0x00)##CFG 13
    WriteReg(0x16, 0x0e, 0x00)##CFG 14
    WriteReg(0x16, 0x0f, 0x00)##CFG 15
    WriteReg(0x16, 0x10, 0x00)##CFG 16
    WriteReg(0x16, 0x11, 0x00)##CFG 17 LOAD = LLH
    WriteReg(0x16, 0x12, 0x00)##CFG 18
    WriteReg(0x16, 0x13, 0x00)##CFG 19
    WriteReg(0x16, 0x14, 0x00)##CFG 20
    WriteReg(0x16, 0x15, 0x00)##CFG 21
    WriteReg(0x16, 0x16, 0x00)##CFG 22
    WriteReg(0x16, 0x17, 0x00)##CFG 23
    WriteReg(0x16, 0x18, 0x00)##CFG 24
    WriteReg(0x16, 0x19, 0x00)##CFG 25
    WriteReg(0x16, 0x1a, 0x00)##CFG 26
    WriteReg(0x16, 0x1b, 0x00)##CFG 27
    WriteReg(0x16, 0x1c, 0x00)##CFG 28
    WriteReg(0x16, 0x1d, 0x00)##CFG 29

    ################changed 20151229
    WriteReg(0x16, 0xc0, 0x00)  ####ctr3
    WriteReg(0x16, 0xc1, 0x00)  ####ctr3
    WriteReg(0x16, 0xc2, 0x00)  ####ctr3
    WriteReg(0x16, 0xc3, 0x00)  ####ctr4
    WriteReg(0x16, 0xc4, 0x00)  ####ctr4
    WriteReg(0x16, 0xc5, 0x00)  ####ctr4
    WriteReg(0x16, 0xc6, 0x00)  ####ctr5
    WriteReg(0x16, 0xc7, 0x00)  ####ctr5
    WriteReg(0x16, 0xc8, 0x00)  ####ctr5
    WriteReg(0x16, 0xA0, 0x00)  #### CTR1[7:0] FOR SOE2
    WriteReg(0x16, 0xA1, 0x00)  #### CTR1[15:8] FOR SOE2
    WriteReg(0x16, 0xA2, 0x00)  #### CTRL[23:16] FOR SOE2
    WriteReg(0x16, 0x90, 0x00)  ####CFG 0 FOR BERT
    WriteReg(0x16, 0x91, 0x00)  ####CFG 1 FOR BERT	JL
    WriteReg(0x16, 0x92, 0x00)  ####CFG 2 FOR BERT	JL
    WriteReg(0x16, 0x93, 0x00)  ####CFG 3 FOR BERT
    WriteReg(0x16, 0x94, 0x00)  ####CFG 4 FOR BERT
    WriteReg(0x16, 0x95, 0x00)  ####CFG 5 FOR BERT
    WriteReg(0x16, 0x96, 0x00)  ####CFG 6 FOR BERT
    WriteReg(0x16, 0x97, 0x00)  ####CFG 7 FOR BERT
    WriteReg(0x16, 0x98, 0x00)  ####CFG 8 FOR BERT
    WriteReg(0x16, 0x99, 0x38)  ####CFG 9 FOR BERT
    WriteReg(0x16, 0x9A, 0x00)  ####CFG 10 FOR BERT	JL
    WriteReg(0x16, 0x9B, 0x00)  ####CFG 11 FOR BERT	JL

    WriteReg(0x16, 0xfe, 0x00)####[0] same cfg for all ports
    WriteReg(0x16,0xff,0x01);

    WriteReg(0x16,0xf7,0x01);  ##[0] signature enable[1] tx_rx_sel
    ##memory control 
    WriteReg(0x14,0x96,0x00);
    BurstWriteReg(0x26,0x00,0x00,0x05,0x00,0x00);
    BurstWriteReg(0x26,0x04,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x08,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x0c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x10,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x14,0x36,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x18,0x0f,0xa2,0x01,0x00);	## modify by chuansong 20141110 tinit3
    BurstWriteReg(0x26,0x1c,0x01,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x20,0x36,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x24,0x36,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x28,0x6b,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x2c,0x01,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x30,0x36,0x00,0x00,0x01);
    BurstWriteReg(0x26,0x34,0x10,0x04,0x10,0x04);
    BurstWriteReg(0x26,0x38,0x04,0x02,0x06,0x22);	## modify by chuansong 20141110 trrd changed 0x06 to 0x06
    BurstWriteReg(0x26,0x3c,0x17,0x04,0x0a,0x1b);
    BurstWriteReg(0x26,0x40,0x06,0x22,0x17,0x04);
    BurstWriteReg(0x26,0x44,0x0a,0x1b,0x04,0x05);
    BurstWriteReg(0x26,0x48,0x05,0x72,0x91,0x00);
    BurstWriteReg(0x26,0x4c,0x03,0x08,0x04,0x05);
    BurstWriteReg(0x26,0x50,0x05,0x72,0x91,0x00);
    BurstWriteReg(0x26,0x54,0x03,0x08,0x00,0x0a);
    BurstWriteReg(0x26,0x58,0x08,0x0a,0x08,0x02);
    BurstWriteReg(0x26,0x5c,0x0a,0x0a,0x14,0x0a);
    BurstWriteReg(0x26,0x60,0x0a,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x64,0x01,0x01,0x12,0x12);
    BurstWriteReg(0x26,0x68,0x03,0x0c,0x0c,0x00);
    BurstWriteReg(0x26,0x6c,0x01,0x01,0x00,0x00);
    BurstWriteReg(0x26,0x70,0x00,0x01,0x47,0x00);	## modify by chuansong 20141110 trfcab changed 0x46 to 0x47
    BurstWriteReg(0x26,0x74,0x2c,0x10,0x46,0x00);
    BurstWriteReg(0x26,0x78,0x2c,0x10,0x00,0x00);
    BurstWriteReg(0x26,0x7c,0x04,0x00,0x04,0x00);
    BurstWriteReg(0x26,0x80,0x00,0x00,0x4b,0x00);	## modify by chuansong 20141110 txsr changed 0x4b to 0x4b
    BurstWriteReg(0x26,0x84,0x4b,0x00,0x4b,0x00);
    BurstWriteReg(0x26,0x88,0x4b,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x8c,0x01,0x00,0x00,0x02);
    BurstWriteReg(0x26,0x90,0x02,0x02,0x02,0x00);
    BurstWriteReg(0x26,0x94,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x98,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x9c,0x00,0x00,0x01,0x20);
    BurstWriteReg(0x26,0xa0,0x00,0x04,0x20,0x00);
    BurstWriteReg(0x26,0xa4,0x00,0x04,0x00,0x00);
    BurstWriteReg(0x26,0xa8,0x00,0x01,0x00,0x00);
    BurstWriteReg(0x26,0xac,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xb0,0x01,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xb4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xb8,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xbc,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xc0,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xc4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xc8,0x00,0x00,0xc3,0x06);	## modify by chuansong 20141110 AUTO_TEMPCHK[15:0] = 0
    BurstWriteReg(0x26,0xcc,0xc3,0x06,0x00,0x01);
    BurstWriteReg(0x26,0xd0,0x01,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xd4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xd8,0x00,0x00,0x01,0x01);
    BurstWriteReg(0x26,0xdc,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xe0,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xe4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xe8,0x00,0x14,0x02,0x00);
    BurstWriteReg(0x26,0xec,0xc0,0x00,0x30,0x00);
    BurstWriteReg(0x26,0xf0,0x14,0x02,0xc0,0x00);
    BurstWriteReg(0x26,0xf4,0x30,0x00,0x00,0x02);
    BurstWriteReg(0x26,0xf8,0x40,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xfc,0x00,0x1b,0x00,0x00);
    WriteReg(0x14,0x96,0x01);
    BurstWriteReg(0x26,0x00,0x1b,0x00,0x00,0x00);	## modify by chuansong 20141110 NO_ZQ_INIT[16] = 0
    BurstWriteReg(0x26,0x04,0x01,0x03,0x00,0x00);
    BurstWriteReg(0x26,0x08,0x0a,0xff,0xff,0x01);
    BurstWriteReg(0x26,0x0c,0x01,0x01,0x00,0x01);	## modify by chuansong 20141110 PLACEMENT_EN[16] = 0
    BurstWriteReg(0x26,0x10,0x01,0x01,0x01,0x03);
    BurstWriteReg(0x26,0x14,0x01,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x18,0x01,0x00,0x00,0x01);	## modify by chuansong 20141110 IN_ORDER_ACCEPT[24] = 1
    BurstWriteReg(0x26,0x1c,0x00,0x00,0x01,0x00);
    BurstWriteReg(0x26,0x20,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x24,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x28,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x2c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x30,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x34,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x38,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x3c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x40,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x44,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x48,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x4c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x50,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x54,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x58,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x5c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x60,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x64,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x68,0x00,0x00,0x00,0x02);
    BurstWriteReg(0x26,0x6c,0x02,0x00,0x00,0x03);
    BurstWriteReg(0x26,0x70,0x03,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x74,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x78,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x7c,0x0d,0x28,0x00,0x00);
    BurstWriteReg(0x26,0x80,0x00,0x00,0x01,0x00);
    BurstWriteReg(0x26,0x84,0x00,0x00,0x01,0x00);
    BurstWriteReg(0x26,0x88,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x8c,0x00,0x01,0x01,0x00);
    BurstWriteReg(0x26,0x90,0x00,0x00,0x00,0x01);
    BurstWriteReg(0x26,0x94,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x98,0xaa,0x56,0x05,0x00);
    BurstWriteReg(0x26,0x9c,0x55,0xa9,0x0a,0x00);
    BurstWriteReg(0x26,0xa0,0x55,0xa9,0x0a,0x00);
    BurstWriteReg(0x26,0xa4,0xaa,0x56,0x05,0x00);
    BurstWriteReg(0x26,0xa8,0xaa,0x56,0x05,0x00);
    BurstWriteReg(0x26,0xac,0x55,0xa9,0x0a,0x00);
    BurstWriteReg(0x26,0xb0,0x55,0xa9,0x0a,0x00);
    BurstWriteReg(0x26,0xb4,0xaa,0x56,0x05,0x00);
    BurstWriteReg(0x26,0xb8,0x00,0x03,0x01,0x00);
    BurstWriteReg(0x26,0xbc,0x00,0x01,0x00,0x01);	## modify by chuansong 20141110 FIXED_PRIORITY_ENABLE[24] = 1
    BurstWriteReg(0x26,0xc0,0x00,0x02,0x00,0x01);	## modify by chuansong 20141110 AXI0_R_PRIORITY[1:0] = 0
    BurstWriteReg(0x26,0xc4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xc8,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xcc,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xd0,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xd4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xd8,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xdc,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xe0,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xe4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xe8,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xec,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xf0,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xf4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xf8,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0xfc,0x00,0x00,0x00,0x00);
    WriteReg(0x14,0x96,0x02);
    BurstWriteReg(0x26,0x00,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x04,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x08,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x0c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x10,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x14,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x18,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x1c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x20,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x24,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x28,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x2c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x30,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x34,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x38,0xff,0xff,0x01,0x00);
    BurstWriteReg(0x26,0x3c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x40,0xff,0xff,0x01,0x03);
    BurstWriteReg(0x26,0x44,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x48,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x4c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x50,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x54,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x58,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x5c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x60,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x64,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x68,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x6c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x70,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x74,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x78,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x7c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x80,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x84,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x88,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x8c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x90,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x94,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0x98,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0x9c,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0xa0,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0xa4,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0xa8,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0xac,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0xb0,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0xb4,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0xb8,0x0f,0x0f,0x03,0x00);
    BurstWriteReg(0x26,0xbc,0xff,0xff,0xff,0xff);
    BurstWriteReg(0x26,0xc0,0x0f,0x0f,0x00,0x00);
    BurstWriteReg(0x26,0xc4,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0xc8,0x00,0x12,0x12,0x00);
    BurstWriteReg(0x26,0xcc,0x00,0x00,0x58,0x20);
    BurstWriteReg(0x26,0xd0,0x00,0x02,0x00,0x02);
    BurstWriteReg(0x26,0xd4,0x00,0x02,0x00,0x02);
    BurstWriteReg(0x26,0xd8,0x58,0x20,0x00,0x00);
    BurstWriteReg(0x26,0xdc,0xb8,0xa1,0x00,0x00);
    BurstWriteReg(0x26,0xe0,0x08,0x04,0x58,0x20);
    BurstWriteReg(0x26,0xe4,0x00,0x02,0x00,0x02);
    BurstWriteReg(0x26,0xe8,0x00,0x02,0x00,0x02);
    BurstWriteReg(0x26,0xec,0x58,0x20,0x00,0x00);
    BurstWriteReg(0x26,0xf0,0xb8,0xa1,0x00,0x00);
    BurstWriteReg(0x26,0xf4,0x08,0x04,0x02,0x02);
    BurstWriteReg(0x26,0xf8,0x00,0x01,0x0a,0x00);
    BurstWriteReg(0x26,0xfc,0x0a,0x00,0x00,0x00);
    WriteReg(0x14,0x96,0x03);
    BurstWriteReg(0x26,0x00,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x04,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x08,0x0a,0x0f,0x00,0x00);
    BurstWriteReg(0x26,0x0c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x10,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x14,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x18,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x1c,0x00,0x00,0x03,0x00);
    BurstWriteReg(0x26,0x20,0x01,0x00,0x07,0x00);
    BurstWriteReg(0x26,0x24,0x01,0x00,0x07,0x00);
    BurstWriteReg(0x26,0x28,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x2c,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x30,0x00,0x00,0x00,0x00);
    BurstWriteReg(0x26,0x34,0x00,0x00,0x01,0x07);
    BurstWriteReg(0x26,0x38,0x03,0x07,0x03,0x01);
    WriteReg(0x14,0x96,0x00);
    BurstWriteReg(0x26,0x00,0x01,0x05,0x41,0x20);


    ####enable dp805
    WriteReg(0x10, 0xec, 0x00);	####[6] sw_lane_enb
    WriteReg(0x10, 0xc8, 0xc0);	####AUX access enable
    
##    ###LPDDR timing config###
##    WriteReg(0x18,0xff,0x01);   ##sub-page1
##    WriteReg(0x18,0x65,0x08);  ##valid
##    WriteReg(0x18,0x07,0xc6);  ##slice 0
##    WriteReg(0x18,0x1b,0xc6);  ##slice 1
##    WriteReg(0x18,0x2f,0xc6);  ##slice 2
##    WriteReg(0x18,0x43,0xc6);  ##slice 3
##    WriteReg(0x18,0xff,0x00);
    
##    ## The following is set for entry APSR mode, must be done after video_ready:
##    sleep(0.05)
##    WriteReg(0x12, 0x23,  0x03);
##    WriteReg(0x12, 0xc1,  0x03);
##    WriteReg(0x12, 0xc2,  0x01);
##    WriteReg(0x12, 0xc4,  0x01);


##====================7.	video MUX turn on, P2.0x72=0x80, wait some time
## ????   WriteReg(0x14,0x72,0x88) ###[1:0] video mux [4] fr,0xsmode [7] free run [3] video mux select 0 : HW  1 : SW
##    WriteReg(0x14,0xf9,0xb0) #i2c_done ????#####################################

##=====================8.	Scramble on, VPG start send pattern to DPTS, then to PHY.

##DPTS enable---------------------------------   
##    WriteReg(0x12,0x20,0x0a) ###link bw
##    WriteReg(0x12,0x21,0x84) ###lane count
##    WriteReg(0x12,0x6d,0x01) #crc start
##-------eye mmonitor AMP: 0x20(0.27UI)
    WriteReg(0x18,0x7a,0xdd)    #lane3/2 en
    WriteReg(0x18,0x79,0x80)    #lane1 en 
    WriteReg(0x18,0x73,0x14)    #[4]:lane0 en, [3]:135MHz, 0x20, [2:0]: AMP [5:3]
    WriteReg(0x18,0x72,0x00)    #[7:5]: AMP[2:0]
    sleep(0.01)
##########20160721###########################    
##=======================9.	PHY on, wait some time
    ###----------<Action 2>--- force phy on---------------
##    WriteReg(0x10,0xeb,0x08)    #lane_enb=0
    WriteReg(0x10,0xec,0x53)    #CDR start=0
    WriteReg(0x14,0xc9,0x02)	###force phy on
    sleep(0.01)
##    if (SCR_en==0):
##        WriteReg(0x12,0x22,0x20) ###scr disable
##        WriteReg(0x1c,0x50,0x02) ###[0] video enable [1] enhanced framing [2] scr_en
##        WriteReg(0x10,0x57,0x09) ###[6] bist pattern select
##        WriteReg(0x1c,0x50,0x03) ###[0] video enable [1] enhanced framing [2] scr_en [7] pcs input select
##        print '[Scramble is disabled!]'
##    if (SCR_en==1):
##        WriteReg(0x12,0x22,0x00) ###scr enable
##        WriteReg(0x1c,0x50,0x06) ###[0] video enable [1] enhanced framing [2] scr_en
##        WriteReg(0x10,0x57,0x29) ###[6] bist pattern select
##        WriteReg(0x1c,0x50,0x07) ###[0] video enable [1] enhanced framing [2] scr_en [7] pcs input select
##        print '[Scramble is enabled!]'

##    WriteReg(0x10,0x03,0x00) ###[1:0] attr stable control
    WriteReg(0x14,0xa1,0x90) ###[7] hpd [4] PHY,0xRDY

    sleep(0.01) #wait CDR lock  
    cdr_lock_fail=ReadRegCompare(0x18,0xb1,0xff,0xff)
    ## The following is set for entry APSR mode, must be done after video_ready:
################20160721################
    sleep(0.05)
    WriteReg(0x12, 0x23,  0x03);
    WriteReg(0x12, 0xc1,  0x03);
    WriteReg(0x12, 0xc2,  0x01);
    WriteReg(0x12, 0xc4,  0x01);
####-------eye mmonitor AMP: 0x20(0.27UI)
##    WriteReg(0x18,0x7a,0xdd)    #lane3/2 en
##    WriteReg(0x18,0x79,0x80)    #lane1 en 
##    WriteReg(0x18,0x73,0x14)    #[4]:lane0 en, [3]:135MHz, 0x20, [2:0]: AMP [5:3]
##    WriteReg(0x18,0x72,0x00)    #[7:5]: AMP[2:0]
##

########=======================10.	video ready, wait some time
######
######
######    WriteReg(0x10,0x04,0x1b)	###<4> sw set video,0xlock
######                    ###[3] VIDEO,0xLOCK select   0 : from video PLL,0x   1 : SW program
######                    ###[1] VIDEO,0xON select   0 : HW auto detect   1 : SW program
######                    ###[0] Software set VIDEO,0xON
######
######    ###reason sw set PLL,0xstart,0x in BIST mode,0x sequence is PLL,0xLOCK---> VPG start gen video pattern---> dp606 core---> Tcon and PIO RX loopback
######    ###checker should wait and set PLL,0xLOCK by software by some delay to wait the time from  'VPG start gen video pattern---> dp606 core---> Tcon and PIO RX loopback'
######
######    WriteReg(0x10,0x8b,0x30)    #LCD en


####======================11.	CRC check
    sleep(0.01)
##    WriteReg(0x1a,0x84,0x00)
##    sleep(0.01)     ###Wait CRC valid, needed!!!!!
##    WriteReg(0x1a,0x84,0x03)
    WriteReg(0x20,0x94,0xff)
    WriteReg(0x20,0x95,0xff)
    sleep(0.3)   ##for 1G DRAM, min 0.2s
    RFB1_fail=ReadRegCompare(0x12,0xc7,0x6b,0xff)
    RFB2_fail=ReadRegCompare(0x20,0x94,0x00,0x7f)
    RFB3_fail=ReadRegCompare(0x20,0x95,0x00,0xff)
##    CRC1_fail=ReadRegCompare(0x1a,0x09,0xd9,0xff)
##    WriteReg(0x1a,0x84,0x13)
##    CRC2_fail=ReadRegCompare(0x1a,0x09,0xba,0xff)
##    WriteReg(0x1a,0x84,0x23)
##    CRC3_fail=ReadRegCompare(0x1a,0x09,0xd9,0xff)
##    WriteReg(0x1a,0x84,0x33)
##    CRC4_fail=ReadRegCompare(0x1a,0x09,0xba,0xff)
##    WriteReg(0x1a,0x84,0x43)
##    CRC5_fail=ReadRegCompare(0x1a,0x09,0xd9,0xff)
##    WriteReg(0x1a,0x84,0x53)
##    CRC6_fail=ReadRegCompare(0x1a,0x09,0xba,0xff)
####    sleep(0.01)
####    WriteReg(0x1a,0x84,0x00)
####    sleep(0.05)
##    WriteReg(0x1a,0x84,0x63)
##    CRC7_fail=ReadRegCompare(0x1a,0x09,0x01,0xff)
##    CRC_fail=CRC1_fail|CRC2_fail|CRC3_fail|CRC4_fail|CRC5_fail|CRC6_fail|CRC7_fail
    RFB_fail=RFB1_fail|RFB2_fail|RFB3_fail
##                               
####======================12.	Signature check
##
##             
##    print ''
##    print 'start cheching signalture!'
##    print 'without PIO loopback'
##    WriteReg(0x16,0xf7,0x01) ##COG_LB_en=0
##    sleep(0.05) #wait signature stable
##    Sig11_fail=ReadRegCompare(0x16,0xf9,0x5d,0xff)
##    Sig12_fail=ReadRegCompare(0x16,0xfa,0x5c,0xff)
##    Sig13_fail=ReadRegCompare(0x16,0xfb,0x5d,0xff)
##    Sig14_fail=ReadRegCompare(0x16,0xfc,0x5c,0xff)
##
##
##    WriteReg(0x16,0xf7,0x03) ###<1> loopback data from tcon
##                ###<0> full-chip bist checker: signature en
##    print ''	    
##    print 'with PIO loopback'
##    sleep(0.05) #wait signature stable
##    Sig21_fail=ReadRegCompare(0x16,0xf9,0x5d,0xff)
##    Sig22_fail=ReadRegCompare(0x16,0xfa,0x5c,0xff)
##    Sig23_fail=ReadRegCompare(0x16,0xfb,0x5d,0xff)
##    Sig24_fail=ReadRegCompare(0x16,0xfc,0x5c,0xff)
##
##    sig_fail=Sig11_fail|Sig12_fail|Sig13_fail|Sig14_fail|Sig21_fail|Sig22_fail|Sig23_fail|Sig24_fail
##
##    if (external_clock_check_fail==0)&(vlpll_not_lock_fail==0)&(vlpll_lock_fail==0)&(v2pll_not_lock_fail==0)&(v2pll_lock_fail==0)&(vspll_not_lock_fail==0)&(vspll_lock_fail==0)&(vmpll_not_lock_fail==0)&(vmpll_lock_fail==0)&(cdr_not_lock_fail==0)&(cdr_lock_fail==0)&(CRC_fail==0)&(sig_fail==0):
    WriteReg(0x12,0xc3,0x81)  ##PSR EXIT
    WriteReg(0x12,0xc4,0x02)  ##PSR EXIT
    sleep(0.1)
    if (external_clock_check_fail==0)&(vlpll_not_lock_fail==0)&(vlpll_lock_fail==0)&(v2pll_not_lock_fail==0)&(v2pll_lock_fail==0)&(vspll_not_lock_fail==0)&(vspll_lock_fail==0)&(vmpll_not_lock_fail==0)&(vmpll_lock_fail==0)&(cdr_not_lock_fail==0)&(cdr_lock_fail==0)&(RFB_fail==0):
        print 'Full chip BIST pass!'
    else:
        print 'Full chip BIST fail!'
        error=error+1
        #KeyInt()
        #Beep(1500,500)
    print '---------------------------------------------------------------'
print 'error is %d' %error
WriteReg(0x12,0xc3,0x81)  ##PSR EXIT
WriteReg(0x12,0xc4,0x02)  ##PSR EXIT
####---------Read CDR CTN FTN-------------
##vala4=ReadReg(0x18,0xa4)
##vala5=ReadReg(0x18,0xa5)
##vala6=ReadReg(0x18,0xa6)
##vala7=ReadReg(0x18,0xa7)
##vala8=ReadReg(0x18,0xa8)
##vala9=ReadReg(0x18,0xa9)
##valaa=ReadReg(0x18,0xaa)
##valab=ReadReg(0x18,0xab)
##print ''
##
##CTN0=((vala5&0x01)<<4)|((vala4&0xf0)>>4) 
##FTN0=((vala5&0xfe)>>1)|((vala6&0x07)<<7)
##
##CTN1=(vala6&0xf8)>>3  
##FTN1=vala7|((vala8&0x03)<<8)
##
##CTN2=(vala8&0x7c)>>2 
##FTN2=((vala8&0x80)>>7)|((vala9&0xff)<<1)|((valaa&0x01)<<9)
##
##CTN3=(valaa&0x3e)>>1 
##FTN3=((valaa&0xc0)>>6)|((valab&0xff)<<2)
##
##print '------------------------------------------'
##print 'CDR CTN0<4:0> is 0x%02X' %CTN0
##print 'CDR CTN1<4:0> is 0x%02X' %CTN1
##print 'CDR CTN2<4:0> is 0x%02X' %CTN2
##print 'CDR CTN3<4:0> is 0x%02X' %CTN3
##print 'CDR FTN0<9:0> is 0x%02X' %FTN0
##print 'CDR FTN1<9:0> is 0x%02X' %FTN1
##print 'CDR FTN2<9:0> is 0x%02X' %FTN2
##print 'CDR FTN3<9:0> is 0x%02X' %FTN3
##print '------------------------------------------'
### PLL Test, COG_CK = 67.5MHZ, VD_CK=33.75MHz,S_CLK=16.875MHz,M_CLK=200MHz
########clock setting
##WriteReg(0x18,0x0f,0x78)#COGPLL SSC 2% enable
##WriteReg(0x18,0x1d,0x78)#VLPLL SSC 2% enable
##WriteReg(0x18,0x2d,0x78)#MPLL SSC 2% enable
##WriteReg(0x18,0x68,0x78)#SPLL SSC 2% enable
##### vclk 33.75 MHz
##WriteReg(0x14, 0x01, 0x00);	####nf of the vclk
##WriteReg(0x14, 0x02, 0x00);	##ni and nf of the vclk
##WriteReg(0x14, 0x03, 0x05);	####start & load & band & ni[7:6]
##
###### sclk 16.875 MHz
##WriteReg(0x14, 0x05, 0x00);	####nf of the sclk
##WriteReg(0x14, 0x06, 0xa0);	##ni and nf of the sclk
##WriteReg(0x14, 0x07, 0x80);	####start & load & band & ni[7:5] 
##
##WriteReg(0x14, 0x00, 0x22);    #VPLL and SPLL start=0
##WriteReg(0x14, 0x25, 0x02);	####[1] vclk_comp enable  [2] vclk_bypass enable
##
###########cog clk 67.5 MHz
##WriteReg(0x14, 0x0a, 0x00);	####nf of the cogclk
##WriteReg(0x14, 0x0b, 0xa0);	##ni and nf of the cogclk
##WriteReg(0x14, 0x0c, 0x00);	##band & ni[7:6]
##WriteReg(0x14, 0x09, 0x02);     #CDIPLL start=0
##
###### mclk 200 MHz
##WriteReg(0x14,0x96,0x03);
##BurstWriteReg(0x26,0xa0,0x07,0xed,0x10,0x00); #200MHz
##BurstWriteReg(0x26,0xa8,0x01,0x00,0x00,0x00); ##MPLL load
##BurstWriteReg(0x26,0xac,0x01,0x9a,0x20,0x08) ##force MPLL start=0
##BurstWriteReg(0x26,0xac,0x01,0x9a,0x00,0x08) ##disable force
##
#####----------------------------------------
##vlpll_not_lock_fail=ReadRegCompare(0x18,0xd1,0x02,0x02)
##v2pll_not_lock_fail=ReadRegCompare(0x18,0xd0,0x02,0x02)
##vmpll_not_lock_fail=ReadRegCompare(0x18,0xd5,0x02,0x02)
##vspll_not_lock_fail=ReadRegCompare(0x18,0xd8,0x02,0x02)
##
####pll start setting
##WriteReg(0x14, 0x00, 0xff);	####vpll and spll start
##WriteReg(0x14, 0x09, 0x0f);     ##cog pll start
##WriteReg(0x14,0x96,0x03);
##BurstWriteReg(0x26,0xa4,0x01,0x00,0x00,0x00); ##MPLL start
##BurstWriteReg(0x26,0xa4,0x00,0x00,0x00,0x00); ##MPLL start clear
##sleep(0.01)
####====================VTPLL lock check
##vlpll_lock_fail=ReadRegCompare(0x18,0xd1,0x00,0x02)
##v2pll_lock_fail=ReadRegCompare(0x18,0xd0,0x00,0x02)
##vmpll_lock_fail=ReadRegCompare(0x18,0xd5,0x00,0x02)
##vspll_lock_fail=ReadRegCompare(0x18,0xd8,0x00,0x02)
